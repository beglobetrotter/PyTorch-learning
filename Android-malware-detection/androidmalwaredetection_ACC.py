from __future__ import print_function, division
import os
import torch
import pandas as pd
import numpy as np
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.optim import lr_scheduler
import time
import copy

# Ignore warnings
import warnings

warnings.filterwarnings("ignore")


class AndroidDetectionDataset(Dataset):
    """Face Landmarks dataset."""

    def __init__(self, api_file, label_file, root_dir, transform=None):
        api_file = os.path.join(root_dir, api_file)
        label_file = os.path.join(root_dir, label_file)
        self.apis_frame = pd.read_csv(api_file)
        self.labels_frame = pd.read_csv(label_file, index_col=1)
        self.root_dir = root_dir
        self.transform = transform

    def __len__(self):
        return len(self.apis_frame)

    def __getitem__(self, idx):
        id = self.apis_frame.iloc[idx, 0]
        apis = self.apis_frame.iloc[idx, 1:].as_matrix()
        apis = apis.astype('float')
        if id in self.labels_frame.index:
            label = 0 if self.labels_frame.loc[id]['label'] == -1 else 1
        else:
            label = 0
        sample = {'label': label, 'apis': apis}

        if self.transform:
            sample = self.transform(sample)

        return sample


class ToTensor(object):
    def __call__(self, sample):
        label, apis = sample['label'], sample['apis']
        label = np.array(label)
        return {'label': torch.from_numpy(label),
                'apis': torch.from_numpy(apis).float()}


classes = (-1, 1)

android_dataset = AndroidDetectionDataset(api_file='api_matrix.csv',
                                          label_file='api_label.csv',
                                          root_dir='androiddetection/',
                                          transform=transforms.Compose([
                                              ToTensor()
                                          ]))

dataloader = DataLoader(android_dataset, batch_size=4, shuffle=True, num_workers=0)
testloader = DataLoader(android_dataset, batch_size=4, shuffle=True, num_workers=0)

# #1
# for i, malware in enumerate(dataloader):
#     if i == 5:
#         print(malware['label'], malware['apis'])
#         break
# #2
# dataiter = iter(dataloader)
# malware = dataiter.next()
# print(malware['label'], malware['apis'])
# print(malware['label'].dtype, malware['apis'].dtype)
# print(malware['label'].size())
# print(malware['apis'].size())
# exit()

# Define a Neural Network
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(329, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 10)
        self.fc4 = nn.Linear(10, 2)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = F.relu(self.fc3(x))
        x = self.fc4(x)
        return x


net = Net()

# Define a Loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)
scheduler = lr_scheduler.StepLR(optimizer, step_size=5, gamma=0.1)
best_model = copy.deepcopy(net.state_dict())
best_acc = 0.0

# labels = torch.randn(2, 1)
# apis = torch.randn(2, 329)
# print(labels, apis, labels.dtype)
# optimizer.zero_grad()
# outputs = net(apis)
# loss = criterion(outputs, labels)
# loss.backward()
# optimizer.step()
# Train the network
for epoch in range(20):  # loop over the dataset multiple times
    since = time.time()
    print('Epoch {}'.format(epoch + 1))
    print('-' * 10)

    # Decay LR by a factor of 0.1 every 7 epochs
    scheduler.step()

    running_loss = 0.0
    running_correct = 0
    running_total = 0
    running_acc = 0.0
    for i, data in enumerate(dataloader, 0):
        # get the inputs
        labels, apis = data['label'], data['apis']
        # print(labels, apis)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(apis)
        loss = criterion(outputs, labels.long())
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 2000 == 1999:  # print every 2000 mini-batches
            print('[%d, %5d] loss: %.3f' %
                  (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0

    with torch.no_grad():
        for data in testloader:
            labels, apis = data['label'], data['apis']
            outputs = net(apis)
            _, predicted = torch.max(outputs.data, 1)
            running_total += labels.size(0)
            running_correct += torch.sum(predicted == labels.long())
        running_acc = running_correct.double() / running_total
        print('ACC: {}'.format(running_acc))
        if running_acc > best_acc:
            best_acc = running_acc
            best_model = copy.deepcopy(net.state_dict())

    print()

net.load_state_dict(best_model)
print('Finished Training')

# testing
correct = 0
total = 0
with torch.no_grad():
    for data in dataloader:
        labels, apis = data['label'], data['apis']
        outputs = net(apis)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += torch.sum(predicted == labels.long())

print('Accuracy of the network on the test files: {}'.format(correct.double() / total))
